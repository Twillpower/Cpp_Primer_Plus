// 在编译时给数组分配内存被称为静态联编 (static binding),
// 还可以在程序运行时选择数组的长度。这被称为动态联编 (dynamic binding),
// 使用静态联编时，必须在编写程序时指定数组的长度；使用动态联编时，程序将在运行时确定数组的长度。
// 使用 new 时，如果在运行阶段需要数组，则创建它；如果不需要， 则不创建。
// 意味着数组是在程序运行时创建的。这种数组叫作动态数组 (dynamic array)
#include <iostream>

int main(int argc, char const *argv[])
{
    using namespace std;

    // 使用 new 创建动态数组, 必须在类型名后加上方括号，其中包含元素数目
    double *p3 = new double[3];
    // 把指针当作数组名使用即可
    p3[0] = 0.3;
    p3[1] = 0.5;
    p3[2] = 0.8;
    cout << "p3[1] is " << p3[1] << ".\n";
    // 不能修改数组名的值。但指针是变量，因此可以修改它的值
    p3 = p3 + 1;
    cout << "Now p3[0] is " << p3[0] << ".\n";
    cout << "p3[1] is " << p3[1] << ".\n";
    // 将 p3 加 1 导致它指向第 2 个元素而不是第 1 个。 将它减 1 后，指针将指向原来的值，这样程序便可以给 delete[]提供正确的地址
    p3 = p3 - 1;
    // 方括号告诉程序，应释放整个数组，而不仅仅是指针指向的元素
    // 如果使用 new 时，不带方括号，则使用 delete 时，也不应带方括号。如果使用 new 时带方括号，则使用 delete 时也应带方括号。
    delete [] p3;

    return 0;
}
// 使用 new 和 delete 时，应遵守以下规则。
// 不要使用 delete 来释放不是 new 分配的内存。 
// 不要使用 delete 释放同一个内存块两次。 
// 如果使用 new []为数组分配内存，则应使用 delete []来释放。
// 如果使用 new (没有方括号）为一个实体分配内存，则应使用 delete (没有方括号）来释放。 
// 对空指针应用 delete 是安全的。